# !/usr/bin/env python3
# -*- coding:utf-8 -*-

'''
重复的访问要排序的数列，一次比较两个元素，重复进行直到排序完成，是一个稳定的排序
// 分类 -------------- 内部比较排序
// 数据结构 ---------- 数组
// 最差时间复杂度 ---- O(n^2)
// 最优时间复杂度 ---- 如果能在内部循环第一次运行时,使用一个旗标来表示有无需要交换的可能,可以把最优时间复杂度降低到O(n)
// 平均时间复杂度 ---- O(n^2)
// 所需辅助空间 ------ O(1)
// 稳定性 ------------ 稳定
当数据越接近正序时，冒泡排序性能越好
'''


def bubble_sort(nums):
    size = len(nums)
    for i in range(size):
        for j in range(i + 1, size):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums


if __name__ == '__main__':
    """
    [5, 2, 1, 3, 4]
    [1, 5, 2, 3, 4]
    [1, 2, 5, 3, 4]
    [1, 2, 3, 5, 4]
    [1, 2, 3, 4, 5]
    [1, 2, 3, 4, 5]
    """
    # l = [50, 10, 30, 20, 60, 40, 1]
    l = [5, 2, 1, 3, 4]
    # l = [8, 5, 2, 6, 9, 3, 1, 4, 0, 7]
    # l = [29, 10, 14, 37, 14]
    f = bubble_sort(l)
    print("finally {}".format(f))
